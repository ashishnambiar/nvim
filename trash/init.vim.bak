
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'tomasiser/vim-code-dark'
Plugin 'morhetz/gruvbox'
Plugin 'pangloss/vim-javascript'
Plugin 'itchyny/lightline.vim'
Plugin 'itchyny/vim-gitbranch'
"nerdtree
Plugin 'preservim/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
Plugin 'szw/vim-maximizer'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'kassio/neoterm'
Plugin 'tpope/vim-commentary'
Plugin 'sbdchd/neoformat'
" Dart/Flutter
Plugin 'dart-lang/dart-vim-plugin'
Plugin 'natebosch/vim-lsc'
Plugin 'natebosch/vim-lsc-dart'
Plugin 'Neevash/awesome-flutter-snippets'
Plugin 'hrsh7th/vim-vsnip'
Plugin 'hrsh7th/vim-vsnip-integ'

Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'}
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
" Plugin 'neovim/nvim-lspconfig'
" Plugin 'nvim-lua/completion-nvim'
" 
" colored brackets
Plugin 'junegunn/rainbow_parentheses.vim'
" 
" hilighted indents
Plugin 'nathanaelkane/vim-indent-guides'
" indent line
Plugin 'yggdroot/indentline'

"airline with theme
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'

"powerline for fancy statusbar
" Plugin 'lokaltog/vim-powerline'

" colorizer highlights colors within the terminal
Plugin 'chrisbra/colorizer'

" emmet for HTML
Plugin 'mattn/emmet-vim'

"minimap
" Plugin 'severin-lemaignan/vim-minimap'

"devicons
" Plugin 'ryanoasis/vim-devicons'

"minimap !!!!!!!!!NOT WORKING!!!!!!!!!!!!
" Plugin 'wfxr/minimap.vim'

"""ONLY FOR GVIM"""
"minimap
" Plugin 'koron/minimap-vim'

call vundle#end()

"""""powerline
" let g:Powerline_symbols = 'fancy'
" let g:Powerline_theme = 'solarized256'
" let airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1


" colorscheme pablo
" set termguicolors
set background=dark
let g:codedark_conservative = 1
" colorscheme codedark 
colorscheme gruvbox


"command W w !sudo tee % > /dev/null

setl completeopt=menuone,noinsert,noselect
" setl completeopt+=menu,menuone,noinsert

set number relativenumber
set ruler

set wrap

set splitright
set splitbelow
" replace tabs with spaces

"set expandtab
" 1 tab = 2 spaces
" set tabstop=2 
" set shiftwidth=2

" when deleting whitespace at the beginning of a line, delete 
" 1 tab worth of spaces (for us this is 2 spaces)
set smarttab

" when creating a new line, copy the indentation from the line above
set autoindent

" Ignore case when searching
set ignorecase
set smartcase

" highlight search results (after pressing Enter)
set hlsearch

" highlight all pattern matches WHILE typing the pattern
set incsearch

" show the mathing brackets
set showmatch

" highlight current line
set cursorline

set hidden

set cmdheight=1

set signcolumn=yes
set updatetime=300


set mouse=a

set laststatus=2
set showtabline=2
" set noshowmode

set showcmd
set guifont=Ubuntu\ Mono:h11
" set guifont=monospace:h9
" set guifont=Ubuntu\ Mono\ derivative\ Powerline:h10


" nmap <leader>guis :GuiFont Ubuntu Mono:h14<CR>
" nmap <leader>guin :GuiFont Ubuntu Mono:h16<CR>
" nmap <leader>guib :GuiFont Ubuntu Mono:h18<CR>

filetype plugin indent on
let mapleader = " "
nnoremap <leader>v :e $MYVIMRC<CR>

let g:netrw_banner=0
let g:makdown_fenced_languages = ['javascript', 'js=javascript', 'json=javascript']

filetype on                  " required



""remap j+k to Esc
" imap jk <Esc>
"vmap <leader>jk <Esc>
"
"remap Ctrl+c to Esc
nmap <c-c> <Esc>
imap <c-c> <Esc>
vmap <c-c> <Esc>
omap <c-c> <Esc>
smap <c-c> <Esc>



"
" nnoremap <leader>n :NERDTreeFocus<CR>
" nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

"remap for tabs
"create new tabs and open NERDTree
" nnoremap <leader>n :tabe new<CR>
nnoremap <leader>n :tabnew<CR>

" few more of the flutter stuff that is needed
nnoremap <c-e> :w<CR>:CocCommand flutter.dev.hotReload<CR>


" nnoremap <leader>n :tabe new<CR>:NERDTreeToggle<CR>
"


let g:coc_global_extensions = [
			\ 'coc-snippets',
			\ 'coc-pairs',
			\ 'coc-tsserver',
			\ 'coc-flutter-tools',
			\ 'coc-eslint',
			\ 'coc-json',
			\ 'coc-pyright',
			\ ]

			" \ 'coc-prettier',
"CTRL-S is next tab

noremap  <C-S> :tabnext<CR>
inoremap <C-S> <C-\><C-N>:tabnext<CR>
cnoremap <C-S> <C-C>:tabnext<CR>

noremap  <C-A> :tabprevious<CR>
inoremap <C-A> <C-\><C-N>:tabprevious<CR>
cnoremap <C-A> <C-C>:tabprevious<CR>

noremap  <C-X><C-X> :tabc<CR>
inoremap <C-X><C-X> <C-\><C-N>:tabc<CR>
cnoremap <C-X><C-X> <C-C>:tabc<CR>

noremap <leader>hh :bp<CR>
noremap <leader>ll :bn<CR>
noremap <leader>x :bd<CR>
noremap <leader>lh :bufdo bd<CR>

" itchyny/lightline.vim and itchyny/vim-gitbranch
let g:lightline = {
			\'active': {
			\		'left':[['mode', 'paste'],
			\						['gitbranch', 'readonly', 'filename', 'modified']]
			\},
			\'component_function': {
			\	'gitbranch': 'gitbranch#name'
			\},
			\'colorscheme': 'codedark',
			\}

"vim-maximizer
nnoremap <leader>m :MaximizerToggle!<CR>

"kassio/neoterm 
let g:neoterm_default_mod = 'vertical' 
let g:neoterm_size = 60 
let g:neoterm_autoinsert = 1 
nnoremap <c-q> :Ttoggle<CR> 
inoremap <c-q> <ESC>:Ttoggle<CR> 
tnoremap <c-q> <c-\><c-n>:Ttoggle<CR>

"sbdchd/neoformat
nnoremap <leader>F :Neoformat prettier<CR>

"apply all defaults keymaps of vim-lsc
let g:lsc_auto_map = v:true


"key-bindings for vim-vsnip

imap <expr> <C-j>   vsnip#available(1)  ? '<Plug>(vsnip-expand)'         : '<C-j>'
imap <expr> <C-p>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-p>'
smap <expr> <C-p>"   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-p>'

"coc, go to definition, find references, go-to implementation

nmap <silent> gf :call CocAction('jumpDefinition', 'tabe')<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" CocCommands for flutter.run flutter.dev.reload flutter.dev.restart
nmap <leader>coc :CocCommand<CR>
nmap <leader>fr :CocCommand flutter.run<CR>
nmap <leader>rl :CocCommand flutter.dev.hotReload<CR>
nmap <leader>rs :CocCommand flutter.dev.hotRestart<CR>
nmap <leader>dl :CocCommand flutter.dev.openDevLog<CR>
" nmap <leader>dl :tabnew<CR>:CocCommand flutter.dev.openDevLog<CR>:MaximizerToggle!<CR>
nmap <leader>dc :CocCommand flutter.dev.clearDevLog<CR>
nmap <leader>dv :CocCommand flutter.devices<CR>
nmap <leader>fg :CocCommand flutter.pub.get<CR>


" junegunn/fzf.vim
nnoremap <leader><space> :GFiles<CR>

nnoremap <leader>ff :Rg<CR>
inoremap <expr> <c-x><c-f> fzf#vim#complete#path(
			\ "find . -path '*/\.*' -prune -o -print \| sed '1d;s:^..::'",
			\ fzf#wrap({'dir': expand('%:p:h')})
" if has('nvim')
" 	au! TermOpen * tnoremap <buffer> <Esc> <c-\><c-n>
" 	au! FileType fzf tunmap <buffer> <Esc> 
" endif

" tpope/vim-fugitive
nnoremap <leader>gg :G<cr>

"""""""""""""""""""""""""""""""""""""rainbow_parentheses

" Activate
" :RainbowParentheses

" Deactivate
" :RainbowParentheses!

" Toggle
" nmap <leader>mnm :RainbowParentheses!!<CR>

" See the enabled colorscheme
" nmap <leader>mmn :RainbowParenthesesColors<CR>

au VimEnter * RainbowParentheses

" Activation based on filetype
augroup rainbow_lisp
	autocmd!
	autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'],['[',']'],['{','}'],['<','>']]

" List of colors that you do not want. ANSI code or #RRGGBB
let g:rainbow#blacklist = [233, 234, 223, 229, 225, 224, 15, 248, 108, 13, 109, 243, 241, 250]
""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""rainbow_parentheses
" delete comments for dart's boiler-plate code 
nnoremap <leader>qq :g/\ \ \/\//d<CR>
" remap undo to ctrl+z
nnoremap <C-Z> u

" for insertmode as well
inoremap <C-Z> <C-O>u
inoremap <C-Y> <C-O><C-R>

"use Ctrl+ (h, j, k, l)
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

inoremap <c-w> <c-o>w
inoremap <c-b> <c-o>b
inoremap <c-e> <c-o>e<Right>


" 
inoremap <C-d><C-d> <C-O>o
inoremap <C-d>D <C-O>O

"half page down centers cursor to page
nnoremap <C-d> <C-d>
nnoremap <C-u> <C-u>

"move tab left or right
nnoremap gtn :+tabm<CR>
nnoremap gtp :-tabm<CR>


" Go to Error 
nnoremap <leader>err :lopen<CR>/error<CR><CR>:noh<CR>
nnoremap <c-n> n<CR>

" let g:minimap_highlight='Visual'
"
" nathanaelkane/indent-line
"
" let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 1
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=grey ctermbg=NONE
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=grey ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=grey ctermbg=NONE
let g:indent_guides_start_level = 1
let g:indent_guides_guide_size=2

"
" yggdroot/indentline
"
" let g:indentLine_char = '|'
	let g:indentLine_char_list = ['|', '¦', '|', '¦']
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" chrisbra/colorizer
nnoremap <leader>col :ColorToggle<CR>

highlight Normal ctermbg=233
highlight Comment cterm=italic  ctermfg=241
" autocmd BufWritePost init.vim source %

" for neovide
" neovide detects 'super + ...' keys
" disabling them when the super key is pressed
nmap <D-s> <Esc>
vmap <D-s> <Esc>
imap <D-s> <Esc>
cmap <D-s> <Esc>

nmap <D-a> <Esc>
vmap <D-a> <Esc>
imap <D-a> <Esc>
cmap <D-a> <Esc>

nmap <D-.> <Esc>
vmap <D-.> <Esc>
imap <D-.> <Esc>
cmap <D-.> <Esc>

nmap <D-,> <Esc>
vmap <D-,> <Esc>
imap <D-,> <Esc>
cmap <D-,> <Esc>
